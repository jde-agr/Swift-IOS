let card1 = Card(Color: Color.hearts, Value: Value.ace)
let card2 = Card(Color: Color.diamonds, Value: Value.king)
let card3 = Card(Color: Color.clubs, Value: Value.two)
let card4 = Card(Color: Color.spades, Value: Value.queen)
let card5 = Card(Color: Color.hearts, Value: Value.ace)

print("List of current cards:")
print("card 1 => \(card1)")
print("card 2 => \(card2)")
print("card 3 => \(card3)")
print("card 4 => \(card4)")
print("card 5 => \(card5)\n")

print("Tests for override function:")
print("\u{001B}[0;37mCheck if card 1 is equal to card 2")
print(card1.isEqual(card2) ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 3")
print(card1.isEqual(card3) ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 4")
print(card1.isEqual(card4) ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 5")
print(card1.isEqual(card5) ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")

print("\n\u{001B}[0;37mTests for overloaded operator:")
print("\u{001B}[0;37mCheck if card 1 is equal to card 2")
print(card1 == card2 ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 3")
print(card1 == card3 ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 4")
print(card1 == card4 ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")
print("\u{001B}[0;37mCheck if card 1 is equal to card 5")
print(card1 == card5 ? "\u{001B}[0;32mtrue" : "\u{001B}[0;31mfalse")